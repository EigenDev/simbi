#include "hip/hip_runtime.h"
#define HIP_CODE 1

#define DEV    __device__
#define KERNEL __global__
#define DUAL   __host__ __device__
#define STATIC __host__ __device__ inline
#define EXTERN extern __shared__

#if FLOAT_PRECISION
using atomic_cast = unsigned int;
#define __int_as_real __int_as_float
#define __real_as_int __float_as_int
#else
using atomic_cast = unsigned long long;
#define __int_as_real __longlong_as_double
#define __real_as_int __double_as_longlong
#endif

using sig_bool = volatile bool;
#define SINGLE(kernel_name, ...) kernel_name<<<1, 1>>>(__VA_ARGS__);

#define CALL(kernel_name, gridsize, blocksize, ...)                            \
    kernel_name<<<(gridsize), (blocksize)>>>(__VA_ARGS__);

namespace global {
#if SHARED_MEMORY
#define SHARED __device__
    // shorthand flag for using gpu shared memory
    constexpr bool on_sm = true;
#else
#define SHARED __device__ const
    // shorthand flag for using gpu shared memory
    constexpr bool on_sm = false;
#endif
    constexpr Platform BuildPlatform = Platform::GPU;
}   // namespace global


namespace global {
    constexpr int WARP_SIZE = 64;
}   // namespace global

template <typename T>
constexpr auto devMalloc(T** devPtr, size_t size)
{
    return hipMalloc(devPtr, size);
}

template <typename T>
constexpr auto devMallocManaged(T** devPtr, size_t size)
{
    return hipMallocManaged(devPtr, size);
}

inline auto devMemcpyFromSymbol(void* dst, const void* symbol, size_t count)
{
    return hipMemcpyFromSymbol(dst, symbol, count);
};

inline auto devEventCreate(hipEvent_t* stamp) { return hipEventCreate(stamp); };

inline auto devEventRecord(hipEvent_t stamp) { return hipEventRecord(stamp); };

constexpr auto devMemcpy               = hipMemcpy;
constexpr auto devFree                 = hipFree;
constexpr auto devMemset               = hipMemset;
constexpr auto devDeviceSynchronize    = hipDeviceSynchronize;
constexpr auto devMemcpyHostToDevice   = hipMemcpyHostToDevice;
constexpr auto devMemcpyDeviceToDevice = hipMemcpyDeviceToDevice;
constexpr auto devMemcpyDeviceToHost   = hipMemcpyDeviceToHost;
constexpr auto devGetErrorString       = hipGetErrorString;
constexpr auto devEventDestroy         = hipEventDestroy;
constexpr auto devEventSynchronize     = hipEventSynchronize;
constexpr auto devEventElapsedTime     = hipEventElapsedTime;
constexpr auto devGetDeviceProperties  = hipGetDeviceProperties;
constexpr auto devGetDeviceCount       = hipGetDeviceCount;
using devProp_t                        = hipDeviceProp_t;
using devError_t                       = hipError_t;
using devEvent_t                       = hipEvent_t;
using simbiStream_t                    = hipStream_t;