#include <stdexcept>
using sig_bool = std::atomic<bool>;
#define SINGLE(kernel_name, ...)                    kernel_name(__VA_ARGS__);
#define CALL(kernel_name, gridsize, blocksize, ...) kernel_name(__VA_ARGS__);

using shared_atomic_bool = std::atomic<bool>;
using atomic_bool        = std::atomic<bool>;

template <typename T>
void store_atomic_bool(T& var, bool value)
{
    var.store(value);
}

namespace global {
    constexpr auto BuildPlatform = Platform::CPU;
    constexpr int WARP_SIZE      = 32;
    // shorthand flag for using gpu shared memory
    constexpr bool on_sm = false;
}   // namespace global

#define CUDA_CODE 0
#define HIP_CODE  0

#define DEV
#define STATIC inline
#define KERNEL
#define DUAL
#define SHARED     const
#define __shared__ static
#define EXTERN     static

// Alias data types on host
namespace simbi {
    struct dim3 {
        luint x, y, z;

        dim3(luint x = 1, luint y = 1, luint z = 1)
            : x(x), y(y), z(z)
        {
        }

        luint volume() const { return x * y * z; }

        luint& operator[](size_t index)
        {
            switch (index) {
                case 0:
                    return x;
                case 1:
                    return y;
                case 2:
                    return z;
                default:
                    throw std::out_of_range("Index out of range for dim3");
            }
        }

        const luint& operator[](size_t index) const
        {
            switch (index) {
                case 0:
                    return x;
                case 1:
                    return y;
                case 2:
                    return z;
                default:
                    throw std::out_of_range("Index out of range for dim3");
            }
        }
    };

    using simbiStream_t   = void*;
    using simbiMemcpyKind = int;
    using devError_t      = int;
    using devProp_t       = int;
    using devEvent_t      = std::chrono::high_resolution_clock::time_point;
    using devModule_t     = void*;
    using devFunction_t   = int;
    using devContext_t    = int;
    using devProgram_t    = int;

    inline dim3 blockIdx(1, 1, 1);
    inline dim3 blockDim(1, 1, 1);
    inline dim3 gridDim(1, 1, 1);
    inline dim3 threadIdx(1, 1, 1);
}   // namespace simbi