#include <cuda_runtime.h>
#define CUDA_CODE 1

#define DEV    __device__
#define KERNEL __global__
#define DUAL   __host__ __device__
#define STATIC __host__ __device__ inline
#define EXTERN extern __shared__

#if FLOAT_PRECISION
using atomic_cast = int;
#define __int_as_real __int_as_float
#define __real_as_int __float_as_int
#else
using atomic_cast = long long;
#define __int_as_real __longlong_as_double
#define __real_as_int __double_as_longlong
#endif

using sig_bool = volatile bool;
#define SINGLE(kernel_name, ...) kernel_name<<<1, 1>>>(__VA_ARGS__);

#define CALL(kernel_name, gridsize, blocksize, ...)                            \
    kernel_name<<<(gridsize), (blocksize)>>>(__VA_ARGS__);

namespace global {
#if SHARED_MEMORY
#define SHARED __device__
    // shorthand flag for using gpu shared memory
    constexpr bool on_sm = true;
#else
#define SHARED __device__ const
    // shorthand flag for using gpu shared memory
    constexpr bool on_sm = false;
#endif
    constexpr Platform BuildPlatform = Platform::GPU;
}   // namespace global

namespace global {
    constexpr int WARP_SIZE = 32;
}   // namespace global

template <typename T>
constexpr auto devMalloc(T** devPtr, size_t size)
{
    return cudaMalloc(devPtr, size);
}

template <typename T>
constexpr auto devMallocManaged(T** devPtr, size_t size)
{
    return cudaMallocManaged(devPtr, size);
}

inline auto devEventCreate(cudaEvent_t* stamp)
{
    return cudaEventCreate(stamp);
};

inline auto devEventRecord(cudaEvent_t stamp)
{
    return cudaEventRecord(stamp);
};

inline auto devMemcpyFromSymbol(void* dst, const void* symbol, size_t count)
{
    return cudaMemcpyFromSymbol(dst, symbol, count);
};

constexpr auto devMemcpy               = cudaMemcpy;
constexpr auto devFree                 = cudaFree;
constexpr auto devMemset               = cudaMemset;
constexpr auto devDeviceSynchronize    = cudaDeviceSynchronize;
constexpr auto devMemcpyHostToDevice   = cudaMemcpyHostToDevice;
constexpr auto devMemcpyDeviceToDevice = cudaMemcpyDeviceToDevice;
constexpr auto devMemcpyDeviceToHost   = cudaMemcpyDeviceToHost;
constexpr auto devGetErrorString       = cudaGetErrorString;
constexpr auto devEventDestroy         = cudaEventDestroy;
constexpr auto devEventSynchronize     = cudaEventSynchronize;
constexpr auto devEventElapsedTime     = cudaEventElapsedTime;
constexpr auto devGetDeviceProperties  = cudaGetDeviceProperties;
constexpr auto devGetDeviceCount       = cudaGetDeviceCount;
using devProp_t                        = cudaDeviceProp;
using devError_t                       = cudaError_t;
using devEvent_t                       = cudaEvent_t;
using simbiStream_t                    = cudaStream_t;