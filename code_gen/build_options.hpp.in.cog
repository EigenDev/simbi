/**
 * ***********************(C) COPYRIGHT 2024 Marcus DuPont**********************
 * @file       build_options.hpp.in
 * @brief      file to configure build mode for various cpu / gpu architectures
 *
 * @note
 * @history:
 *   Version   Date            Author          Modification    Email
 *   V0.8.0    Dec-03-2023     Marcus DuPont marcus.dupont@princeton.edu
 *
 * @verbatim
 * ==============================================================================
 *
 * ==============================================================================
 * @endverbatim
 * ***********************(C) COPYRIGHT 2024 Marcus DuPont**********************
 */
#ifndef BUILD_OPTIONS_HPP
#define BUILD_OPTIONS_HPP

#mesondefine FLOAT_PRECISION
#mesondefine COLUMN_MAJOR
#mesondefine FOUR_VELOCITY
#mesondefine PROGRESS_BAR
#mesondefine SHARED_MEMORY

#include <atomic>      // for atomic
#include <chrono>      // for high_resolution_clock
#include <cinttypes>   // for uint32_t, int64_t, uint64_t
#include <csignal>     // for size_t
#include <string>      // for allocator, string

#if FLOAT_PRECISION
using real = float;
#else
using real = double;
#endif
/*
 * defines a global namespace for functions and
 * variables scattered throughout the code
 */
namespace global {
    // Flag that detects whether program is run using openmp
    inline bool use_omp = false;

    enum class Platform : int {
        CPU = 0,
        GPU = 1
    };
    enum class Runtime : int {
        CUDA = 0,
        ROCM = 1,
        CPU  = 2
    };
    enum class Velocity : int {
        Beta         = 0,
        FourVelocity = 1
    };

// enum to check the relativistic primitive velocity type (beta, or gamma-beta)
#if FOUR_VELOCITY
    constexpr Velocity VelocityType = Velocity::FourVelocity;
#else
    constexpr Velocity VelocityType = global::Velocity::Beta;
#endif

#if PROGRESS_BAR
    constexpr bool progress_bar_enabled = true;
#else
    constexpr bool progress_bar_enabled = false;
#endif

#if DEBUG
    constexpr bool debug_mode = true;
#else
    constexpr bool debug_mode = false;
#endif

    // max iterations in newton-raphson loop
    const int MAX_ITER = 1000;
}   // namespace global

using luint = uint64_t;
using lint  = int64_t;

namespace global {
//======================== COLUMN MAJOR CHECK
#if COLUMN_MAJOR
    // column major flag
    constexpr bool col_maj = true;
#else
    // column major flag
    constexpr bool col_maj = false;
#endif

    // float or double precision tolerance scale
    constexpr real epsilon = std::numeric_limits<real>::epsilon() * 1e3;

//======================== Managed Memory Check
#ifdef MANAGED_MEMORY
    // unified memory flag
    constexpr bool managed_memory = true;
#else
    // unified memory flag
    constexpr bool managed_memory = false;
#endif
}   // namespace global

//[[[cog
import os
from pathlib import Path
import inspect
src_file_path = inspect.getfile(lambda: None).split()[1]

# Get the path of the current script
current_file_path = Path(src_file_path).resolve()

# Get the directory containing the current script
current_directory = current_file_path.parent

gpu_enabled = bool(os.getenv('GPU_ENABLED'))

def include_file(file_name):
    with open(file_name, 'r') as file:
        return file.read()

if gpu_enabled:
    cog.outl('#if GPU_CODE')

    gpu_platform = os.getenv('GPU_PLATFORM')
    if gpu_platform == 'CUDA':
        cog.outl(include_file(current_directory / 'cuda_mode.cog'))
    elif gpu_platform == 'HIP':
        cog.outl(include_file(current_directory / 'hip_mode.cog'))
    cog.outl('#else')
    cog.outl(include_file(current_directory / 'cpu_mode.cog'))
    cog.outl('#endif')
else:
    cog.outl(include_file(current_directory / 'cpu_mode.cog'))
//]]]
//[[[end]]]

namespace global {
    // shorthand flag for gpu compilation check
    constexpr bool on_gpu = BuildPlatform == Platform::GPU;

    template <typename T>
    DUAL void inline swap(T& a, T& b)
    {
#ifdef __CUDA_ARCH__
        T temp = a;
        a      = b;
        b      = temp;
#else
        std::swap(a, b);
#endif
    }
}   // namespace global
#endif