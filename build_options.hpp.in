#ifndef BUILD_OPTIONS_HPP
#define BUILD_OPTIONS_HPP

#mesondefine FLOAT_PRECISION
#mesondefine ONED_BLOCK_SIZE
#mesondefine TWOD_BLOCK_SIZE
#mesondefine THREED_BLOCK_SIZE
#mesondefine COLUMN_MAJOR
#include <functional>    // std::function
#include <chrono>        // high_resolution_clock
#include <csignal>       // SIGACTION
#include <exception>     // std::exception
#include <cmath>         // std::sqrt, std::log10, etc/
#include <string>        // std::string 
#include <stdint.h>      // int_type, uint64_t, int64_t

using luint = uint64_t;
using lint  = int64_t;

// Flag that detects whether prgram was terminated by external forces
extern volatile sig_atomic_t killFlag;

enum class Platform: int {CPU = 0, GPU = 1};
enum class Velocity: int {Beta = 0, FourVelocity = 1};
#if FOUR_VELOCITY
constexpr Velocity VelocityType = Velocity::FourVelocity;
#else
constexpr Velocity VelocityType = Velocity::Beta;
#endif

#if GPU_CODE
constexpr Platform BuildPlatform = Platform::GPU;
#else 
constexpr Platform BuildPlatform = Platform::CPU;
#endif 

constexpr int BLOCK_SIZE   = ONED_BLOCK_SIZE;
constexpr int BLOCK_SIZE2D = TWOD_BLOCK_SIZE;
constexpr int BLOCK_SIZE3D = THREED_BLOCK_SIZE;
constexpr int MAX_ITER     = 1000;
// Precision preprocessing
#if FLOAT_PRECISION
using real = float;
constexpr real tol_scale = 1e-6;
#else
using real = double;
constexpr real tol_scale = 1e-12;
#endif 

#if COLUMN_MAJOR 
constexpr bool col_maj = true;
#else 
constexpr bool col_maj = false;
#endif 

#if defined(__NVCC__) || defined(__HIPCC__) || (defined(__clang__) && defined(__HIP__))
#define GPU_DEV                        __device__
#define GPU_DEV_INLINE                 __device__ inline
#define GPU_LAUNCHABLE                 __global__
#define GPU_LAMBDA                     __device__
#define GPU_CALLABLE                   __host__ __device__
#define GPU_CALLABLE_INLINE            __host__ __device__ inline
#define GPU_CALLABLE_MEMBER            __host__ __device__
#define GPU_CALLABLE_INLINE_MEMBER     __host__ __device__ inline

#if defined(__NVCC__) && !defined(__HIP__)
#include <cuda_runtime.h>
#define CUDA_CODE 1
using simbiStream_t = cudaStream_t;
constexpr int WARP_SIZE    = 32;
#define anyGpuMalloc                 cudaMalloc
#define anyGpuMallocManaged          cudaMallocManaged
#define anyGpuMemcpy                 cudaMemcpy
#define anyGpuFree                   cudaFree
#define anyGpuMemset                 cudaMemset
#define anyGpuDeviceSynchronize      cudaDeviceSynchronize
#define anyGpuMemcpyHostToDevice     cudaMemcpyHostToDevice
#define anyGpuMemcpyDeviceToDevice   cudaMemcpyDeviceToDevice
#define anyGpuMemcpyDeviceToHost     cudaMemcpyDeviceToHost
#define anyGpuGetErrorString         cudaGetErrorString
#define anyGpuError_t                cudaError_t
#define anyGpuEvent_t                cudaEvent_t
#define anyGpuEventCreate            cudaEventCreate
#define anyGpuEventDestroy           cudaEventDestroy
#define anyGpuEventRecord            cudaEventRecord 
#define anyGpuEventSynchronize       cudaEventSynchronize 
#define anyGpuEventElapsedTime       cudaEventElapsedTime
#define anyGpuProp_t                 cudaDeviceProp
#define anyGpuGetDeviceProperties    cudaGetDeviceProperties
#define anyGpuGetDeviceCount         cudaGetDeviceCount
#else 
#include "hip/hip_runtime.h"
#define HIP_CODE 1
using simbiStream_t = hipStream_t;
constexpr int WARP_SIZE    = 64;
#define anyGpuMalloc                 hipMalloc
#define anyGpuMallocManaged          hipMallocManaged
#define anyGpuMemcpy                 hipMemcpy
#define anyGpuFree                   hipFree
#define anyGpuMemset                 hipMemset
#define anyGpuDeviceSynchronize      hipDeviceSynchronize
#define anyGpuMemcpyHostToDevice     hipMemcpyHostToDevice
#define anyGpuMemcpyDeviceToDevice   hipMemcpyDeviceToDevice
#define anyGpuMemcpyDeviceToHost     hipMemcpyDeviceToHost
#define anyGpuGetErrorString         hipGetErrorString
#define anyGpuError_t                hipError_t
#define anyGpuEvent_t                hipEvent_t
#define anyGpuEventCreate            hipEventCreate
#define anyGpuEventDestroy           hipEventDestroy
#define anyGpuEventRecord            hipEventRecord 
#define anyGpuEventSynchronize       hipEventSynchronize 
#define anyGpuEventElapsedTime       hipEventElapsedTime
#define anyGpuProp_t                 hipDeviceProp_t
#define anyGpuGetDeviceProperties    hipGetDeviceProperties
#define anyGpuGetDeviceCount         hipGetDeviceCount
#endif
#else
constexpr int WARP_SIZE = 32;
#define CUDA_CODE 0
#define HIP_CODE 0

#define GPU_DEV                         
#define GPU_LAUNCHABLE                 
#define GPU_LAMBDA                     
#define GPU_CALLABLE               
#define GPU_CALLABLE_INLINE          inline
#define GPU_CALLABLE_MEMBER        
#define GPU_CALLABLE_INLINE_MEMBER   inline
#define GPU_DEV_INLINE               inline 
#define __shared__                   static

// Define a bunch of ghost functions to make the compiler
// happy and avoid a bunch if #ifdefs throughout code
// Don't get too mad at me... I'm a physicist, not a programmer :-)
namespace simbi {
    struct u3
    {
        ~u3() = default;
        uint32_t x;
        uint32_t y;
        uint32_t z;

        u3(uint32_t x = 1, uint32_t y = 1, uint32_t z = 1)
        :
        x(x),
        y(y),
        z(z)
        {
            
        }

    };

    using simbiStream_t = int;
    using anyGpuError_t = int;
    using dim3 = u3;

    using anyGpuEvent_t = std::chrono::high_resolution_clock::time_point;
    enum anyGpuMemcpyType {
        anyGpuMemcpyHostToDevice,
        anyGpuMemcpyDeviceToDevice,
        anyGpuMemcpyDeviceToHost
    };
    inline dim3 blockIdx(1, 1, 1); 
    inline dim3 blockDim(1, 1, 1); 
    inline dim3 gridDim(1, 1, 1); 
    inline dim3 threadIdx(1, 1, 1);
    constexpr Platform pyBuild = BuildPlatform;

    inline int anyGpuMallocManaged(void** ptr , size_t size) {
        return 0;
    }

    inline int anyGpuMalloc(void** ptr , size_t size) {
        return 0;
    }

    inline int anyGpuMemset(void* ptr, int val, size_t size){
        return 0;
    }

    template <typename T> inline int anyGpuFree(T * ptr) {
        return 0;
    }

    inline int anyGpuMemcpy( void* dest , const void* src , size_t size, anyGpuMemcpyType tt) {
        return 0;
    }

    inline int anyGpuEventCreate(anyGpuEvent_t *a) {
        return 0;
    }

    inline int anyGpuEventDestroy(anyGpuEvent_t *a) {
        return 0;
    }

    inline int anyGpuEventRecord(anyGpuEvent_t a) {
        return 0;
    }

    inline int anyGpuEventSynchronize(anyGpuEvent_t a) {
        return 0;
    }

    inline int anyGpuEventElapsedTime(float *time, anyGpuEvent_t a, anyGpuEvent_t b) {
        return 0;
    }
    inline void __syncthreads() { return;}
    inline anyGpuError_t anyGpuDeviceSynchronize() { return 0;}

    template <typename T>
    inline std::string anyGpuGetErrorString(T) { return std::string("nothing odd here.");}
} // end simbi
using namespace simbi;
#endif

#endif
